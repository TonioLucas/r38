rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Admin check via custom claim or settings/admins doc (mirrors Firestore rules)
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.admin == true || (
          firestore.exists(/databases/(default)/documents/settings/admins) &&
          (request.auth.token.email in firestore.get(/databases/(default)/documents/settings/admins).data.emails)
        )
      );
    }

    // Ebooks folder: deny all direct reads; downloads must use signed URLs from Functions
    match /ebooks/{allPaths=**} {
      allow read: if false;
      allow write: if isAdmin();
    }

    // Admin-managed public assets
    match /public/{allPaths=**} {
      allow read: if true; // public
      allow write: if isAdmin();
    }

    // Default deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}