rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }

    // Admin check - using email from auth token
    // Note: Storage rules cannot directly query Firestore, so we check emails here
    // These should match the emails in Firestore settings/admins document
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.email == 'admin@renato38.com.br' ||
        request.auth.token.email == 'antoniolucasdeor@gmail.com'
      );
    }

    // Ebooks folder: deny all direct reads; downloads must use signed URLs from Functions
    match /ebooks/{allPaths=**} {
      allow read: if false;
      allow write: if isAdmin();
    }

    // Images folder: public read, admin write
    match /images/{allPaths=**} {
      allow read: if true; // public images
      allow write: if isAdmin();
    }

    // Banners folder: public read, admin write
    match /banners/{allPaths=**} {
      allow read: if true; // public banners for carousel
      allow write: if isAdmin();
    }

    // Admin-managed public assets
    match /public/{allPaths=**} {
      allow read: if true; // public
      allow write: if isAdmin();
    }

    // Manual verifications: signed URL uploads only, no direct reads (admin access via Firestore URLs)
    match /manual_verifications/{fileName} {
      allow read: if false; // Access via signed URLs only
      // Allow writes via signed URLs (generated by backend with rate limiting)
      // Signed URLs bypass these rules, but we keep strict validation for security
      allow write: if request.resource.size < 100 * 1024 * 1024  // Max 100MB
                   && request.resource.size > 1024  // Min 1KB
                   && (request.resource.contentType == 'application/pdf'
                       || request.resource.contentType.matches('image/.*'));
    }

    // Default deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}