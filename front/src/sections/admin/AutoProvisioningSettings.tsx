"use client";

import { useState, useEffect } from 'react';
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  FormControlLabel,
  Switch,
  Button,
  Stack,
  Typography,
  Alert,
  CircularProgress,
  Box,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
} from '@mui/icons-material';
import { useSnackbar } from 'notistack';
import { settingsOperations } from '@/lib/firestore';
import { bulkApproveAutoGeneratedVerifications } from '@/lib/api/admin';
import { collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '@/lib/firebase';

export default function AutoProvisioningSettings() {
  const { enqueueSnackbar } = useSnackbar();

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [enabled, setEnabled] = useState(false);
  const [pendingCount, setPendingCount] = useState(0);
  const [showWarningModal, setShowWarningModal] = useState(false);

  useEffect(() => {
    loadSettings();
  }, []);

  const loadSettings = async () => {
    try {
      const settings = await settingsOperations.getMain();
      if (settings) {
        setEnabled(settings.auto_provisioning_enabled || false);
      } else {
        // Settings don't exist yet, use safe default (false)
        setEnabled(false);
      }
    } catch (error) {
      console.error('Error loading auto-provisioning settings:', error);
      enqueueSnackbar('Erro ao carregar configurações', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const countPendingVerifications = async (): Promise<number> => {
    try {
      const verificationsRef = collection(db, 'manual_verifications');
      const q = query(
        verificationsRef,
        where('status', '==', 'pending'),
        where('auto_generated', '==', true)
      );
      const snapshot = await getDocs(q);
      return snapshot.size;
    } catch (error) {
      console.error('Error counting pending verifications:', error);
      return 0;
    }
  };

  const handleSaveClick = async () => {
    // If ENABLING toggle, check for pending verifications
    if (enabled && !(await settingsOperations.getMain())?.auto_provisioning_enabled) {
      const count = await countPendingVerifications();

      if (count > 0) {
        setPendingCount(count);
        setShowWarningModal(true);
        return; // Don't save yet, show warning modal
      }
    }

    // No pending verifications OR disabling toggle: save immediately
    await saveSettings();
  };

  const saveSettings = async () => {
    try {
      setSaving(true);

      await settingsOperations.updateMain({
        auto_provisioning_enabled: enabled,
      });

      enqueueSnackbar('Configurações salvas com sucesso', { variant: 'success' });
      await loadSettings();
    } catch (error) {
      console.error('Error saving settings:', error);
      enqueueSnackbar('Erro ao salvar configurações', { variant: 'error' });
    } finally {
      setSaving(false);
    }
  };

  const handleBulkApprove = async () => {
    try {
      setSaving(true);
      setShowWarningModal(false);

      // Call bulk approval endpoint
      const result = await bulkApproveAutoGeneratedVerifications();

      if (result.fail_count > 0) {
        enqueueSnackbar(
          `${result.success_count} aprovadas, ${result.fail_count} falharam`,
          { variant: 'warning' }
        );
      } else {
        enqueueSnackbar(
          `${result.success_count} verificações aprovadas com sucesso`,
          { variant: 'success' }
        );
      }

      // Now save the toggle setting
      await saveSettings();
    } catch (error) {
      console.error('Error bulk approving verifications:', error);
      enqueueSnackbar('Erro ao aprovar verificações', { variant: 'error' });
    } finally {
      setSaving(false);
    }
  };

  return (
    <>
      <Accordion>
        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
          <Typography variant="h6">Auto-Provisionamento</Typography>
        </AccordionSummary>
        <AccordionDetails>
          {loading ? (
            <Box display="flex" justifyContent="center" py={3}>
              <CircularProgress />
            </Box>
          ) : (
            <Stack spacing={3}>
              <Alert severity="warning">
                <strong>Atenção:</strong> Esta funcionalidade controla se clientes pagantes são
                provisionados automaticamente após confirmação do pagamento. Quando desabilitado,
                todos os pagamentos criam verificações manuais que devem ser aprovadas na aba
                &quot;Verificações&quot;.
              </Alert>

              <FormControlLabel
                control={
                  <Switch
                    checked={enabled}
                    onChange={(e) => setEnabled(e.target.checked)}
                    disabled={saving}
                  />
                }
                label="Habilitar auto-provisionamento"
              />

              <Alert severity="info">
                <Typography variant="subtitle2" gutterBottom>
                  <strong>Como funciona:</strong>
                </Typography>
                <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                  <li>
                    <strong>Habilitado (ON):</strong> Clientes são provisionados automaticamente
                    após pagamento confirmado
                  </li>
                  <li>
                    <strong>Desabilitado (OFF):</strong> Pagamentos criam verificações manuais na
                    aba "Verificações" que devem ser aprovadas manualmente
                  </li>
                  <li>
                    Use o modo OFF como rede de segurança para testar em produção sem risco
                  </li>
                </ul>
              </Alert>

              {!enabled && (
                <Alert severity="success">
                  <strong>Modo de Segurança Ativo:</strong> Todos os pagamentos estão pausados e
                  requerem aprovação manual. Ideal para testes em produção.
                </Alert>
              )}

              <Button
                variant="contained"
                onClick={handleSaveClick}
                disabled={saving}
                sx={{ alignSelf: 'flex-start' }}
              >
                {saving ? 'Salvando...' : 'Salvar Configurações'}
              </Button>
            </Stack>
          )}
        </AccordionDetails>
      </Accordion>

      {/* Warning modal for pending verifications */}
      <Dialog
        open={showWarningModal}
        onClose={() => !saving && setShowWarningModal(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Verificações Pendentes</DialogTitle>
        <DialogContent>
          <Alert severity="warning" sx={{ mt: 2 }}>
            Você tem <strong>{pendingCount}</strong> verificações pendentes de aprovação.
            <br />
            <br />
            Deseja aprovar todas antes de habilitar o auto-provisionamento?
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button
            onClick={() => setShowWarningModal(false)}
            disabled={saving}
          >
            Cancelar
          </Button>
          <Button
            onClick={() => {
              setShowWarningModal(false);
              saveSettings(); // Save without bulk approval
            }}
            disabled={saving}
            color="secondary"
          >
            Salvar Sem Aprovar
          </Button>
          <Button
            onClick={handleBulkApprove}
            variant="contained"
            color="primary"
            disabled={saving}
          >
            {saving ? 'Aprovando...' : 'Aprovar Todas'}
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
}
