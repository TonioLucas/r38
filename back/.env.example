ENV=production
GOOGLE_APPLICATION_CREDENTIALS=./your-service-account.json

# reCAPTCHA v3 Secret Key (NEVER expose this to frontend!)
RECAPTCHA_SECRET_KEY=your_recaptcha_v3_secret_key

# Admin emails (comma-separated)
ADMIN_EMAILS=admin@renato38.com.br,antoniolucasdeor@gmail.com

# Storage/Download Configuration
MAX_DOWNLOADS_PER_EMAIL_24H=3
EBOOK_DOWNLOAD_LINK_TTL_MINUTES=10

# ActiveCampaign Integration
# Get these from ActiveCampaign Dashboard > Settings > Developer
# ACCOUNT: Copy the URL shown (e.g., yourname.activehosted.com or yourname.api-us1.com)
# API_KEY: Copy the "Key" value (starts with a long hex string)
# LIST: Name of the list to add contacts to (REQUIRED - must exist in ActiveCampaign)
# TAG: Name of the tag to apply (REQUIRED - must exist in ActiveCampaign, triggers automation)
# DOWNLOAD_FIELD_ID: Custom field ID for storing download link (find in Fields & Views)
ACTIVECAMPAIGN_ACCOUNT=your_account.activehosted.com
ACTIVECAMPAIGN_API_KEY=your_api_key_here
ACTIVECAMPAIGN_EBOOK_LIST=Ebook Leads
ACTIVECAMPAIGN_EBOOK_TAG=Ebook Downloaded
ACTIVECAMPAIGN_DOWNLOAD_FIELD_ID=2

# Stripe Payment Integration
# Get these from Stripe Dashboard > Developers > API keys
# SECRET_KEY: Server-side key for API calls (starts with sk_test_ or sk_live_)
# PUBLISHABLE_KEY: Client-side key for frontend (starts with pk_test_ or pk_live_)
# WEBHOOK_SECRET: Signing secret for webhook verification (starts with whsec_)
# Get webhook secret from: Stripe Dashboard > Developers > Webhooks > Add endpoint
STRIPE_SECRET_KEY=sk_test_your_secret_key_here
STRIPE_PUBLISHABLE_KEY=pk_test_your_publishable_key_here
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here

# BTCPay Server Integration
# Get these from your BTCPay Server instance
# SERVER_URL: Your BTCPay Server URL (e.g., https://btcpay.yourserver.com)
# STORE_ID: Store ID from Store Settings > General
# API_KEY: Create API key in Store Settings > Access Tokens > Create New Token
# WEBHOOK_SECRET: Custom secret for webhook signature verification (generate secure random string)
BTCPAY_SERVER_URL=https://btcpay.yourserver.com
BTCPAY_STORE_ID=your_store_id_here
BTCPAY_API_KEY=your_api_key_here
BTCPAY_WEBHOOK_SECRET=your_webhook_secret_here

# Dub.co Affiliate Integration
# Get these from dub.co dashboard
# API_KEY: Settings > Developers > API Keys > Create
# WEBHOOK_SECRET: Settings > Webhooks > Create Webhook > Copy signing secret
# Use webhook URL: https://your-domain/process_payment_webhook?provider=dub
DUB_API_KEY=dub_xxxxxxxxxxxxx
DUB_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxx

# Astron Members Integration
# Get these from: https://central.astronmembers.com.br/api-keys
# You will receive TWO values when generating API keys:
# - am_key (API Key) - First credential for Basic HTTP Auth
# - am_secret (API Secret) - Second credential for Basic HTTP Auth
# Both are required for all API calls
# Note: Each product needs astron_club_id configured in Firestore
ASTRON_MEMBERS_API_URL=https://api.astronmembers.com.br/v1.0
ASTRON_MEMBERS_AM_KEY=your_am_key_here
ASTRON_MEMBERS_AM_SECRET=your_am_secret_here

# Customer Provisioning
# PASSWORD_ENCRYPTION_KEY: Fernet key for encrypting stored passwords
# Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
# IMPORTANT: Store this securely - losing it means passwords cannot be decrypted
PASSWORD_ENCRYPTION_KEY=your_base64_fernet_key_here

# ActiveCampaign Welcome Email Automation
# WELCOME_AUTOMATION_ID: ID of the automation that sends welcome emails with credentials
# Find in ActiveCampaign: Automations > Your Welcome Automation > URL contains ID
# The automation should trigger on tag "Trigger_Welcome_Email" and use these fields:
# - {generated_password} - Customer's generated password
# - {magic_login_url} - One-click login URL for Astron Members
# - {product_purchased} - Name of the purchased product
# - {support_expires_at} - Support expiration date
ACTIVECAMPAIGN_WELCOME_AUTOMATION_ID=automation_id_here