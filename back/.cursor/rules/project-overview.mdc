---
alwaysApply: true
---

# Python Firebase Functions Template - Project Overview

This template follows the broker architecture pattern for Firebase Functions using Python. It's designed for creating scalable, maintainable Firebase Functions projects with consistent structure and best practices.

# Tech Stack

### **Backend**

- **Firebase Functions (Python)** - Serverless backend functions
- **Firebase Admin SDK** - Firebase integration and authentication
- **Pydantic** - Type validation and serialization
- **Flask** - HTTP endpoints and CORS handling

### **Database & Storage**

- **Firestore** - Primary NoSQL database for real-time data
- **Firebase Storage** - File uploads and media storage
- **Firebase Authentication** - User management and authentication

# Folder Structure

- `src/` - Source code following broker architecture
- `tests/` - Integration and unit tests
- `main.py` - Firebase function exports
- `requirements.txt` - Python dependencies

# Development Principles

All code must be clearly readable and maintainable. It must read like a story. Everything should be self-explanatory. You should not need tons of comments to understand what it does. The key idea is to make sure I can understand what the code does in 5 seconds. If I can't, you should refactor the code. Below is a list of principles that you must follow to achieve this:

- ü™ü **No broken windows**: Keep code clean from the start. Don't leave anything for later.
- üîÑ **DRY**: Don't repeat yourself. If you are about to write the same code twice, stop, reconsider your approach and refactor.
- üåê **Leave it better than you found it**: Improve bad code as you encounter it. Your code should clearly communicate its purpose.
- üîÅ **Write code once**: Don't repeat yourself. Make code modular and extract components when needed. Prefer types over obvious comments.
- üß™ **Test First**: Do not start integrating any front-end features until they have been fully tested on the back end.
- üë®‚Äçüíª **SOLID**: Follow SOLID principles. Write single purpose short self-contained functions.

# Firebase Functions Specific Principles

- **Document-Based Operations**: All Firestore operations must go through DocumentBase classes
- **Type Safety**: Use Pydantic models for all data validation
- **Test-Driven Development**: Write integration tests first, verify Firestore documents
- **Broker Pattern**: Separate request handling from business logic
- **Factory Pattern**: Use factories for complex object creation
- **Service Pattern**: Orchestrate multiple document operations in services

## Common Patterns

### Creating a Callable Function

```python
@https_fn.on_call(
    cors=options.CorsOptions(cors_origins=["*"]),
    ingress=options.IngressSetting.ALLOW_ALL,
)
def function_name(req: https_fn.CallableRequest):
    uid = db_auth_wrapper(req)
    # Implementation
```

### Creating a Document Class

```python
class MyDocument(ProjectDocumentBase[MyDocType]):
    pydantic_model = MyDocType

    def __init__(self, id: str, doc: Optional[dict] = None):
        self.collection_ref = self.db.collections["my_collection"]
        super().__init__(id, doc)
```

### Creating a Service

```python
class MyService:
    def __init__(self, doc: MyDocument):
        self.document = doc

    def complex_operation(self):
        # Orchestrate multiple documents
```
